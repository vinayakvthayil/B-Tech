# -*- coding: utf-8 -*-
"""Labsheet 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YvIeozINshu34s7_nxgALx5dJp6tjl7E

Name: Vinayak V Thayil        
Roll No: AM.EN.U4CSE21161
"""

#1
import pandas as pd
df1=pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data")
df1

#2
import pandas as pd
headers = ["symboling", "normalized-losses", "make", "fuel-type", "aspiration", "num-of-doors", "body-style",
           "drive-wheels", "engine-location", "wheel-base", "length", "width", "height", "curb-weight",
           "engine-type", "num-of-cylinders", "engine-size", "fuel-system", "bore", "stroke", "compression-ratio",
           "horsepower", "peak-rpm", "city-mpg", "highway-mpg", "price"]
print(df1)

#3
import pandas as pd
print(df1.head())

#4
print(df1.head())

#5
missing_values = df1.isna()
print(missing_values)

#6
missing_counts = df1.isna().sum()
print(missing_counts)

#7
columns_with_missing_values = df1.columns[df1.isna().any()].tolist()
print("Columns with at least one missing value:", columns_with_missing_values)

#8
missing_indexes = df1[df1["normalized-losses"].isna()].index
print(missing_indexes)

print(df1.columns)

#9
mean_normalized_losses = df1["normalized-losses"].mean()
mean_stroke = df1["stroke"].mean()
mean_bore = df1["bore"].mean()
df1["normalized-losses"].fillna(mean_normalized_losses, inplace=True)
df1["stroke"].fillna

#11
mode_num_of_doors = df1["num-of-doors"].mode()[0]
df1["num-of-doors"].fillna(mode_num_of_doors, inplace=True)
print(df1)

#12
df1["horsepower"].fillna(method="ffill", inplace=True)
df1["peak-rpm"].fillna(method="ffill", inplace=True)
print(df1)

#13
df1.dropna(subset=["price"], inplace=True)
print(df1)

#14
column_data_types = df1.dtypes
print(column_data_types)

#15
df1["bore"] = df1["bore"].astype(float)
df1["stroke"] = df1["stroke"].astype(float)
column_data_types = df1.dtypes
print(column_data_types)

#16
columns_to_normalize = ["length", "width", "height"]
for column in columns_to_normalize:
    df1[column] = (df1[column] - df1[column].min()) / (df1[column].max() - df1[column].min())
print(df1[columns_to_normalize])